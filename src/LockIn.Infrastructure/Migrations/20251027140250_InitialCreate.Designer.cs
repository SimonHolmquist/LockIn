// <auto-generated />
using System;
using LockIn.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LockIn.Infrastructure.Migrations
{
    [DbContext(typeof(LockInDbContext))]
    [Migration("20251027140250_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.DayTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsImmutable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentTemplateId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Version");

                    b.ToTable("DayTemplate", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.DayTemplateItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("MedicationDoseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId", "DisplayOrder");

                    b.ToTable("DayTemplateItem", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.KeyActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("KeyActivity", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.MedicationDose", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MgPerUnit")
                        .HasPrecision(6, 1)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitsPerDose")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MedicationDose", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsImmutable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StartDate", "EndDate");

                    b.ToTable("Plan", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.PlanDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PlanId", "Date")
                        .IsUnique();

                    b.ToTable("PlanDay", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.PlanTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyActivityNameSnapshot")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MedicationMgPerUnitSnapshot")
                        .HasPrecision(6, 1)
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicationNameSnapshot")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MedicationUnitsPerDoseSnapshot")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PlanDayId")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlanDayId", "DisplayOrder");

                    b.ToTable("PlanTask", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.TaskKeyActivity", b =>
                {
                    b.Property<Guid>("PlanTaskId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("KeyActivityId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanTaskId");

                    b.ToTable("TaskKeyActivity", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.TaskMedicationIntake", b =>
                {
                    b.Property<Guid>("PlanTaskId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("MedicationDoseId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitsTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitsTotal")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanTaskId");

                    b.ToTable("TaskMedicationIntake", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.TaskTraining", b =>
                {
                    b.Property<Guid>("PlanTaskId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainingType")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlanTaskId");

                    b.ToTable("TaskTraining", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.TaskTreadmill", b =>
                {
                    b.Property<Guid>("PlanTaskId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Km")
                        .HasPrecision(5, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("PlanTaskId");

                    b.ToTable("TaskTreadmill", (string)null);
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.DayTemplateItem", b =>
                {
                    b.HasOne("LockIn.Infrastructure.Data.Entities.DayTemplate", null)
                        .WithMany("Items")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.PlanTask", b =>
                {
                    b.HasOne("LockIn.Infrastructure.Data.Entities.PlanDay", null)
                        .WithMany("Tasks")
                        .HasForeignKey("PlanDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.TaskKeyActivity", b =>
                {
                    b.HasOne("LockIn.Infrastructure.Data.Entities.PlanTask", null)
                        .WithOne()
                        .HasForeignKey("LockIn.Infrastructure.Data.Entities.TaskKeyActivity", "PlanTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.TaskMedicationIntake", b =>
                {
                    b.HasOne("LockIn.Infrastructure.Data.Entities.PlanTask", null)
                        .WithOne()
                        .HasForeignKey("LockIn.Infrastructure.Data.Entities.TaskMedicationIntake", "PlanTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.TaskTraining", b =>
                {
                    b.HasOne("LockIn.Infrastructure.Data.Entities.PlanTask", null)
                        .WithOne()
                        .HasForeignKey("LockIn.Infrastructure.Data.Entities.TaskTraining", "PlanTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.TaskTreadmill", b =>
                {
                    b.HasOne("LockIn.Infrastructure.Data.Entities.PlanTask", null)
                        .WithOne()
                        .HasForeignKey("LockIn.Infrastructure.Data.Entities.TaskTreadmill", "PlanTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.DayTemplate", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LockIn.Infrastructure.Data.Entities.PlanDay", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
